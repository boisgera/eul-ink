// Generated by CoffeeScript 1.12.7
(function() {
  var bus, main, type;

  type = function(item) {
    return Object.prototype.toString.call(item).slice(8, -1).toLowerCase();
  };

  bus = new Vue();

  Vue.component("v-page", {
    data: function() {
      return {
        style: {
          width: "100%",
          height: "100vh"
        }
      };
    },
    template: "<div :style=\"style\">\n  <slot></slot>\n</div>"
  });

  Vue.component("v-button", {
    props: ["name"],
    data: function() {
      return {
        style: {
          display: "inline-block",
          padding: "0.5em",
          pointerEvents: "auto",
          backgroundColor: "rgba(0,0,0,0)",
          cursor: "default"
        },
        highlight: false,
        counter: 0
      };
    },
    template: "<div \n  :style=\"style\"\n  @click=\"click\"\n  @mouseenter=\"highlight = true\"\n  @mouseleave=\"highlight = false\">\n  <i :class=\"classes\"></i>\n</div>",
    watch: {
      highlight: function(status) {
        return this.style.cursor = status ? "pointer" : "default";
      }
    },
    computed: {
      classes: function() {
        return ["fa", "fa-" + this.name];
      }
    },
    methods: {
      click: function(event) {
        return this.$emit("v-click", event);
      }
    }
  });

  Vue.component("v-svg", {
    props: {
      viewBox: {
        type: Array,
        "default": function() {
          return [-8, -4.5, 16, 9];
        }
      }
    },
    data: function() {
      return {
        boundingBox: [1, 1, 1, 1],
        style: {
          width: "100%",
          height: "100vh",
          backgroundColor: "white"
        },
        drag: {
          active: false,
          x: 0,
          y: 0
        },
        aim: [0, 0],
        overlay: {
          style: {
            position: "absolute",
            top: "0",
            left: "0",
            width: "100%",
            height: "100%",
            pointerEvents: "none"
          }
        },
        dock: {
          style: {
            position: "absolute",
            top: "0",
            left: "0",
            width: "100%",
            height: "auto",
            fontSize: "5vmin"
          }
        }
      };
    },
    template: "<div style=\"position: relative\">\n  <svg \n    :viewBox=\"flippedViewBox\" \n    preserveAspectRatio=\"xMidYMid meet\"\n    shape-rendering=\"optimizePrecision\"\n    :style=\"style\"\n    @mousedown=\"startDrag\"\n    @mousemove=\"onDrag\"\n    @mouseup=\"stopDrag\"\n    ref=\"svg\">\n      <g transform=\"scale(1,-1)\">\n        <slot> \n        </slot>\n      </g>\n   </svg>\n   <div class=\"overlay\" :style=\"overlay.style\">\n     <div class=\"dock\" :style=\"dock.style\">\n       <v-button name=\"camera-retro\" @v-click=\"snapshot\"></v-button>\n     </div>\n   </div>\n </div>",
    methods: {
      onResize: function() {
        var bbox, elt;
        elt = this.$refs.svg;
        bbox = elt.getBoundingClientRect();
        return this.boundingBox = [bbox.left, bbox.top, bbox.width, bbox.height];
      },
      convert: function(coords, bbox, viewbox) {
        var X, Y, ref, u, v, x, y;
        X = coords[0], Y = coords[1];
        ref = [(X - bbox[0]) / bbox[2], (Y - bbox[1]) / bbox[3]], u = ref[0], v = ref[1];
        v = 1 - v;
        x = viewbox[0] + u * viewbox[2];
        y = viewbox[1] + v * viewbox[3];
        return [x, y];
      },
      startDrag: function(e) {
        var ref;
        this.drag.active = true;
        ref = this.convert([e.pageX, e.pageY], this.boundingBox, this.effectiveViewport), this.drag.x = ref[0], this.drag.y = ref[1];
        return bus.$emit("aim", [this.drag.x, this.drag.y]);
      },
      onDrag: function(e) {
        if (this.drag.active) {
          return this.startDrag(e);
        }
      },
      stopDrag: function() {
        return this.drag.active = false;
      },
      snapshot: function() {
        var anchor, event, svg;
        console.log("snapshot");
        anchor = document.createElement("a");
        svg = this.$refs.svg.cloneNode(true);
        svg.setAttribute("width", "1600px");
        svg.setAttribute("height", "900px");
        svg.style.width = void 0;
        svg.style.height = void 0;
        anchor.setAttribute("href", "data:image/svg+xml;charset=utf-8," + encodeURIComponent(svg.outerHTML));
        anchor.setAttribute("download", "figure.svg");
        event = document.createEvent("MouseEvents");
        event.initEvent("click", true, true);
        return anchor.dispatchEvent(event);
      }
    },
    computed: {
      flippedViewBox: function() {
        var vb;
        vb = this.viewBox.slice(0);
        vb[1] = -vb[1] - vb[3];
        return vb.join(" ");
      },
      effectiveViewport: function() {
        var bbHeight, bbWidth, bbXmin, bbYmin, height, newHeight, newWidth, ref, ref1, width, xmin, ymin;
        ref = this.boundingBox, bbXmin = ref[0], bbYmin = ref[1], bbWidth = ref[2], bbHeight = ref[3];
        ref1 = this.viewBox.slice(0), xmin = ref1[0], ymin = ref1[1], width = ref1[2], height = ref1[3];
        if (bbWidth / bbHeight >= width / height) {
          newWidth = (bbWidth / bbHeight) * height;
          xmin = xmin - (newWidth - width) / 2;
          width = newWidth;
        } else {
          newHeight = (bbHeight / bbWidth) * width;
          ymin = ymin - (newHeight - height) / 2;
          height = newHeight;
        }
        return [xmin, ymin, width, height];
      }
    },
    mounted: function() {
      this.onResize();
      return window.addEventListener("resize", this.onResize);
    }
  });

  Vue.component("wheel", {
    props: {
      swivelRadius: {
        "default": 0.5
      },
      wheelOffset: {
        "default": 2
      },
      wheelWidth: {
        "default": 0.5
      },
      wheelRadius: {
        "default": 1
      }
    },
    data: function() {
      return {
        x: 0,
        y: 0,
        gamma: 0,
        target: {
          x: 0,
          y: 0
        },
        animation: {
          origin: {
            x: 0,
            y: 0,
            gamma: 0
          },
          id: void 0,
          t: 0.0,
          T: 3.0,
          date: void 0
        }
      };
    },
    template: "<g>\n<circle r=\"0.25\" :cx=\"target.x\" :cy=\"target.y\" style=\"fill:red\"></circle>\n<g :transform=\"transform\">\n  <circle \n    :r=\"swivelRadius\">\n  </circle>\n  <rect \n    :width=\"2 * wheelRadius\" :height=\"wheelWidth\" \n    :transform=\"wheelTransform\">\n  </rect>\n</g>\n</g>",
    computed: {
      transform: function() {
        return "translate(" + this.x + ", " + this.y + ") \nrotate(" + (this.gamma / Math.PI * 180.0) + " 0 0)";
      },
      wheelTransform: function() {
        return "translate(" + (this.wheelOffset - this.wheelRadius) + ", " + (-this.wheelWidth / 2) + ")";
      }
    },
    watch: {
      target: function() {
        var update;
        if (this.animation.id != null) {
          window.cancelAnimationFrame(this.animation.id);
        }
        this.animation.t = 0;
        this.animation.date = void 0;
        this.animation.origin.x = this.x;
        this.animation.origin.y = this.y;
        this.animation.origin.gamma = this.gamma;
        update = (function(_this) {
          return function() {
            var T, date, dt, dx, dy, old, t;
            date = +new Date();
            old = _this.animation.date;
            if (old == null) {
              old = _this.animation.date = date;
            }
            dt = (date - old) / 1000;
            t = _this.animation.t += dt;
            _this.animation.date = date;
            T = _this.animation.T;
            _this.x = (1 - t / T) * _this.animation.origin.x + (t / T) * _this.target.x;
            _this.y = (1 - t / T) * _this.animation.origin.y + (t / T) * _this.target.y;
            dx = (dt / T) * (_this.target.x - _this.animation.origin.x);
            dy = (dt / T) * (_this.target.y - _this.animation.origin.y);
            _this.gamma += (dx * Math.sin(_this.gamma) - dy * Math.cos(_this.gamma)) / _this.wheelOffset;
            if (t < _this.animation.T) {
              return _this.animation.id = window.requestAnimationFrame(update);
            } else {
              return _this.animation.t = 0;
            }
          };
        })(this);
        return this.animation.id = window.requestAnimationFrame(update);
      }
    },
    created: function() {
      return bus.$on("aim", (function(_this) {
        return function(xy) {
          return _this.target = {
            x: xy[0],
            y: xy[1]
          };
        };
      })(this));
    }
  });

  Vue.component("v-demo", {
    template: "<v-page>\n  <v-svg>\n    <wheel>\n    </wheel>\n  </v-svg>\n</v-page>"
  });

  main = function() {
    return new Vue({
      el: "#app",
      template: "<v-demo></v-demo>"
    });
  };

  document.addEventListener("DOMContentLoaded", main);

}).call(this);
